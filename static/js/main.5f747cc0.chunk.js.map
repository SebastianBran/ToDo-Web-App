{"version":3,"sources":["components/formTask.js","components/task.js","components/listTasks.js","App.js","reportWebVitals.js","index.js"],"names":["Input","props","className","type","placeholder","onChange","value","id","autoComplete","Button","onClick","name","SubtaskForm","onClickEditSubstask","onClickDeleteSubtask","toString","FormTask","onSubmit","e","preventDefault","onChangeTask","task","state","target","setState","onChangeSubtask","subtask","validInputSubtask","i","length","onClickAddSubtask","listSubtasks","push","completed","onClickEditSubtask","splice","onClickAddTask","JSON","parse","stringify","aux","addTask","Array","showSubtask","this","map","j","React","Component","Checkbox","style","Subtask","styleCheckbox","background","subtasks","styleTextSubtask","textDecoration","Task","onClickCheckboxSubtask","styleTextTask","onClickCheckboxTask","delete","ListTasks","onChangeSelect","SelectValue","console","log","random","min","max","Math","tasks","showTasks","deleteTask","App","validTask","idTask","idSubtask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f747cc0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './formTask.css';\r\n\r\nfunction Input(props) {\r\n    return(\r\n        <input\r\n            className={props.className}\r\n            type=\"text\"\r\n            placeholder={props.placeholder}\r\n            onChange={props.onChange}\r\n            value={props.value}\r\n            id={props.id}\r\n            autoComplete=\"off\"\r\n        >\r\n        </input>\r\n    );\r\n}\r\n\r\nfunction Button(props) {\r\n    return(\r\n        <button\r\n            className={props.className}\r\n            id={props.id}\r\n            onClick={props.onClick}\r\n        >\r\n            {props.name}\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction SubtaskForm(props) {\r\n    return(\r\n        <div \r\n            className=\"subtask\"\r\n            id={props.id}\r\n            key={props.id.toString()}\r\n        >\r\n            <p>{props.value}</p>\r\n            <i \r\n                className=\"fas fa-pen\"\r\n                onClick={props.onClickEditSubstask}\r\n            >\r\n            </i>\r\n            <i \r\n                className=\"fas fa-times\"\r\n                onClick={props.onClickDeleteSubtask}\r\n            >\r\n            </i>\r\n        </div> \r\n    );\r\n}\r\n\r\nclass FormTask extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            task: {\r\n                value: '',\r\n                completed: false,\r\n                listSubtasks: Array(0)\r\n            },\r\n            subtask: ''\r\n        }\r\n    }\r\n    \r\n    // Prevent refresh the page\r\n    onSubmit = (e) => { e.preventDefault(); }\r\n\r\n    // Update the task value\r\n    onChangeTask = (e) => {\r\n        const task = this.state.task;\r\n        task.value = e.target.value;\r\n        this.setState({task: task});\r\n    }\r\n\r\n    //Update the subtask value\r\n    onChangeSubtask = (e) => {\r\n        this.setState({\r\n            subtask: e.target.value\r\n        });\r\n    }\r\n\r\n    validInputSubtask = () => {\r\n        const subtask = this.state.subtask;\r\n        for(let i = 0; i < subtask.length; i++) {\r\n            if(subtask[i] !== ' ') return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    onClickAddSubtask = () => {\r\n        if(this.validInputSubtask()) {\r\n            const task = this.state.task;\r\n            task.listSubtasks.push({\r\n                value: this.state.subtask, \r\n                completed: false\r\n            });\r\n            this.setState({\r\n                task: task,\r\n                subtask: ''\r\n            });\r\n        }\r\n        else this.setState({subtask: ''});\r\n    }\r\n\r\n    onClickEditSubtask = (id) => {\r\n        const subtask = this.state.task.listSubtasks[id].value;\r\n        this.setState({subtask: subtask});\r\n        this.onClickDeleteSubtask(id);\r\n    }\r\n\r\n    onClickDeleteSubtask = (id) => {\r\n        const task = this.state.task;\r\n        task.listSubtasks.splice(id, 1);\r\n        this.setState({task: task});\r\n    }\r\n\r\n    onClickAddTask = () => {\r\n        /*JSON.parse(JSON.stringify(object) this is used to copy an object whitout reference*/\r\n        const task = JSON.parse(JSON.stringify(this.state.task)); \r\n        const aux = JSON.parse(JSON.stringify(task));\r\n        this.props.addTask(task);\r\n        aux.value = '';\r\n        aux.listSubtasks = Array(0);\r\n        this.setState({\r\n            task: aux,\r\n            subtask: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const task = this.state.task;\r\n        const showSubtask = task.listSubtasks.map((i, j) => {\r\n            return(\r\n                <SubtaskForm \r\n                    value={i.value}\r\n                    id={j}\r\n                    key={j}\r\n                    onClickEditSubstask={() => this.onClickEditSubtask(j)}\r\n                    onClickDeleteSubtask={() => this.onClickDeleteSubtask(j)}\r\n                />\r\n            );\r\n        });\r\n\r\n        return(\r\n            <form \r\n                className=\"form-task\"\r\n                onSubmit={this.onSubmit}\r\n            >\r\n                <div className=\"container-input-task\">\r\n                    <Input \r\n                        className=\"form-input-task\"\r\n                        placeholder=\"Add a task\"\r\n                        onChange={this.onChangeTask}\r\n                        value={this.state.task.value}\r\n                        id=\"task\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-subtasks\">\r\n                    <div className=\"container-input-button\">\r\n                        <Input \r\n                            className=\"form-input-subtask\"\r\n                            placeholder=\"Add a subtask\"\r\n                            onChange={this.onChangeSubtask}\r\n                            value={this.state.subtask}\r\n                            id=\"subtask\"\r\n                        />\r\n                        <Button \r\n                            className=\"form-button-addSubtask\"\r\n                            id=\"button-addSubtask\"\r\n                            name=\"Add\"\r\n                            onClick={this.onClickAddSubtask}\r\n                        />\r\n                    </div>\r\n                    <div className=\"container-subtasks\">\r\n                        {showSubtask}\r\n                    </div>\r\n                </div>\r\n                <div className=\"container-add-task\">\r\n                    <Button \r\n                        className=\"form-button-addTask\"\r\n                        id=\"button-addTask\"\r\n                        name=\"Add task\"\r\n                        onClick={this.onClickAddTask}\r\n                    />\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FormTask","import React from 'react'\r\nimport './task.css'\r\n\r\nfunction Checkbox(props) {\r\n    return(\r\n        <div className=\"container-check\">\r\n            <i \r\n                className=\"fas fa-check\"\r\n                style={props.style}\r\n                onClick={props.onClick}\r\n            >\r\n            </i>\r\n        </div>\r\n    );\r\n} \r\n\r\nfunction Subtask(props) {\r\n    //sTYLES\r\n    const styleCheckbox = {};\r\n    styleCheckbox.background = (props.subtasks.completed) ? \"rgb(47, 255, 134)\" : \"rgb(192, 192, 192)\";\r\n\r\n    const styleTextSubtask = {};\r\n    styleTextSubtask.textDecoration = (props.subtasks.completed) ? \"line-through\" : \"none\";\r\n\r\n    return(\r\n        <div \r\n            className=\"subtask-task\"\r\n            id={props.id}\r\n            key={props.id.toString()}\r\n        > \r\n            <Checkbox \r\n                onClick={props.onClick}\r\n                style={styleCheckbox}\r\n            />\r\n            <p \r\n                className=\"text-subtask\"\r\n                style={styleTextSubtask}\r\n            >\r\n                {props.subtasks.value}\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Task extends React.Component {\r\n    render() {\r\n        const subtasks = this.props.task.listSubtasks;\r\n        const showSubtask = subtasks.map((i, j) => {\r\n            return(\r\n                <Subtask \r\n                    subtasks={i}\r\n                    id={j}\r\n                    key={j}\r\n                    onClick={() => this.props.onClickCheckboxSubtask(this.props.id, j)}\r\n                />\r\n            );\r\n        });\r\n\r\n        //STYLES\r\n        const styleCheckbox = {};\r\n        styleCheckbox.background = (this.props.task.completed) ? \"rgb(47, 255, 134)\" : \"rgb(192, 192, 192)\";\r\n\r\n        const styleTextTask = {};\r\n        styleTextTask.textDecoration = (this.props.task.completed) ? \"line-through\" : \"none\";\r\n\r\n        return(\r\n            <div className=\"container-task\">\r\n                <div className=\"task\">\r\n                    <Checkbox \r\n                        onClick={this.props.onClickCheckboxTask}\r\n                        style={styleCheckbox}\r\n                    />\r\n                    <p \r\n                        className=\"text-task\"\r\n                        style={styleTextTask}\r\n                    >\r\n                        {this.props.task.value}\r\n                    </p>\r\n                    <div className=\"container-trash\">\r\n                        <i \r\n                            className=\"fas fa-trash\"\r\n                            onClick={this.props.delete}\r\n                        >\r\n                        </i>\r\n                    </div>           \r\n                </div>\r\n                <div className=\"list-subtasks-task\">\r\n                    {showSubtask}\r\n                </div>\r\n            </div>  \r\n        );\r\n    }\r\n}\r\n\r\nexport default Task;","import React from 'react'\r\nimport './listTasks.css'\r\nimport Task from './task'\r\n\r\nclass ListTasks extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            SelectValue: \"All\"\r\n        }\r\n    }\r\n\r\n    onChangeSelect = (e) => {\r\n        this.setState({SelectValue: e.target.value});\r\n        console.log(e.target.value);\r\n    }\r\n\r\n    random = (min, max) => Math.random() * (max - min) + min;\r\n\r\n    render() {\r\n        const tasks = this.props.tasks;\r\n        const SelectValue = this.state.SelectValue;\r\n        const showTasks = tasks.map((i, j) => {\r\n            if((SelectValue === \"All\") || (SelectValue === \"Completed\" && i.completed) || (SelectValue === \"Uncompleted\" && !i.completed)) {\r\n                return(\r\n                    <Task\r\n                        task={i}\r\n                        id={j}\r\n                        key={j}\r\n                        delete={() => this.props.deleteTask(j)}\r\n                        onClickCheckboxTask={() => this.props.onClickCheckboxTask(j)}\r\n                        onClickCheckboxSubtask={this.props.onClickCheckboxSubtask}\r\n                    />\r\n                );\r\n            }\r\n            return(<div key={this.random(0, 1e18)}></div>); //default\r\n        });\r\n\r\n        return(\r\n            <div className=\"listTasks\">\r\n                <div className=\"container-filter\">\r\n                    <span>Filter: </span>\r\n                    <select \r\n                        className=\"filter\"\r\n                        value={this.state.SelectValue}\r\n                        onChange={this.onChangeSelect}\r\n                    >\r\n                        <option value=\"All\">All</option>\r\n                        <option value=\"Completed\">Completed</option>\r\n                        <option value=\"Uncompleted\">Uncompleted</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"container-tasks\">\r\n                    {showTasks}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListTasks","import React from 'react'\nimport './App.css';\nimport FormTask from \"./components/formTask\"\nimport ListTasks from \"./components/listTasks\"\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: Array(0)\n        }\n    }\n\n    validTask = (task) => {\n        const value = task.value;\n        for(let i = 0; i < value.length; i++) {\n            if(value[i] !== ' ') return true;\n        }\n        return false;\n    }\n\n    addTask = (task) => {\n        if(this.validTask(task)) {\n            const tasks = this.state.tasks;\n            tasks.push(task);\n            this.setState({\n                tasks: tasks\n            });\n        }\n    }\n\n    deleteTask = (id) => {\n        const tasks = this.state.tasks;\n        tasks.splice(id, 1);\n        this.setState(tasks);\n    }\n\n    onClickCheckboxTask = (id) => {\n        const tasks = this.state.tasks;\n        const task = tasks[id];\n        task.completed = !task.completed; //change the completed value of the task (true or false)\n        const subtasks = task.listSubtasks;\n        //change the completed value of the subtask to the completed value of the task\n        for(let i = 0; i < subtasks.length; i++)\n            subtasks[i].completed = task.completed;\n        task.listSubtasks = subtasks;\n        tasks[id] = task;\n        this.setState({tasks: tasks});\n    }\n\n    onClickCheckboxSubtask = (idTask, idSubtask) => {\n        const tasks = this.state.tasks;\n        const task = tasks[idTask];\n        const subtasks = task.listSubtasks;\n        if(subtasks[idSubtask].completed) task.completed = false;\n        subtasks[idSubtask].completed = !subtasks[idSubtask].completed;\n        task.listSubtasks = subtasks;\n        tasks[idTask] = task;\n        this.setState({tasks: tasks});\n        console.log(tasks);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"Header\">\n                    <p>To Do</p>\n                </div>\n                <div className=\"board\">\n                    <FormTask \n                        addTask={this.addTask}\n                    />\n                    <ListTasks \n                        tasks={this.state.tasks}\n                        deleteTask={this.deleteTask}\n                        onClickCheckboxTask={this.onClickCheckboxTask}\n                        onClickCheckboxSubtask={this.onClickCheckboxSubtask}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}